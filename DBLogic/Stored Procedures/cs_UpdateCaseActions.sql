-----------------------------------------------------------------------------------------------------------------------------
-- Creation of cs_UpdateCaseActions
-----------------------------------------------------------------------------------------------------------------------------
if exists (select * from sysobjects where id = object_id(N'[dbo].[cs_UpdateCaseActions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
begin
	print '**** Drop procedure dbo.cs_UpdateCaseActions.'
	drop procedure dbo.cs_UpdateCaseActions
end
print '**** Creating procedure dbo.cs_UpdateCaseActions...'
print ''
go

set QUOTED_IDENTIFIER off
go

create proc dbo.cs_UpdateCaseActions 
		@pnCaseKey		int,	-- mandatory 
		@pbPoliceImmediately	bit	=0,
		@pnUserIdentityId	int	= null,
		@pnPolicingBatchNo 	int	= null
as
-- PROCEDURE :	cs_UpdateCaseActions
-- VERSION :	8
-- DESCRIPTION:	This stored procedure is called after any of the characteristics involved
--		in Policing are changed.  Where an OpenAction row exists that is no longer 
--		a valid Action, the OPENACTION row will be closed.  All other OpenActions
--		will be repoliced by being sent to the Policing Server.
-- COPYRIGHT:	Copyright 1993 - 2012 CPA Global Software Solutions (Australia) Pty Limited
-- MODIFICATIONS:
-- Date		Who	Change	Version	Description
-- -----------	-------	------	-------	----------------------------------------------- 
-- 20/03/2002	MF			Procedure Created
-- 05/11/2003	AB			Change variable @Rowcount for case sensitive servers
-- 16/11/2005	vql	9704	2	When updating POLICING table insert @pnUserIdentityId.
--					Add optional @pnUserIdentityId parameter.
-- 28/11/2005	AB		3	Add collate database_default to @tbPolicing temp table.
-- 19/12/2005	TM	RFC3200	4	Add a new optional parameter @pnPolicingBatchNo (int).
--					Pass @pnUserIdentityId parameter to the ipu_Policing.
-- 17 Jul 2008	MF	16720	5	Correction to the logic of when the OPENACTION should be 
--					closed.
-- 23 Dec 2011	MF	R11734	6	Policing generated by a change of Case characteristics should allow Event Dates to be recalculated.
-- 31 Jan 2012	LP	R11784	7	Increase @tbPolicing.POLICINGSEQNO size to allow 32K+.
-- 14 Nov 2018  AV  75198/DR-45358	8   Date conversion errors when creating cases and opening names in Chinese DB

set nocount on
set concat_null_yields_null off


declare @tbPolicing table (
		POLICINGSEQNO	int	identity,
		ACTION		nvarchar(2)	collate database_default NOT NULL,
		CYCLE		smallint	NOT NULL
 		)

declare	@ErrorCode		int
declare @RowCount		int
declare	@TranCountStart		int

declare @nBatchNo		int
declare	@sSQLString		nvarchar(4000)

Set @ErrorCode=0

If @ErrorCode=0
and @pnPolicingBatchNo is null
Begin 
	Select @TranCountStart = @@TranCount
	BEGIN TRANSACTION
End

-- Close any OpenAction rows where the Action is no longer a
-- Valid Action for the combination of CountryCode, Propertytype and Casetype

If @ErrorCode=0
Begin
	Set @sSQLString="
	Update OPENACTION
	Set POLICEEVENTS=0
	from OPENACTION O
	join CASES C	on (C.CASEID=O.CASEID)
	left join (select distinct CASETYPE, PROPERTYTYPE, COUNTRYCODE
		   from VALIDACTION) VA1
			on (VA1.CASETYPE=C.CASETYPE
			and VA1.PROPERTYTYPE=C.PROPERTYTYPE
			and VA1.COUNTRYCODE =C.COUNTRYCODE)
	left join VALIDACTION VA2
			on (VA2.CASETYPE    =C.CASETYPE
			and VA2.PROPERTYTYPE=C.PROPERTYTYPE
			and VA2.ACTION      =O.ACTION
			and VA2.COUNTRYCODE =(select min(VA3.COUNTRYCODE)
						from VALIDACTION VA3
						where VA3.CASETYPE=C.CASETYPE
						and VA3.PROPERTYTYPE=C.PROPERTYTYPE
						and VA3.COUNTRYCODE in (C.COUNTRYCODE,'ZZZ')))
	where O.CASEID=@pnCaseKey
	and O.POLICEEVENTS>0
	and(VA1.COUNTRYCODE<>VA2.COUNTRYCODE
	 OR VA2.COUNTRYCODE is null)"

	exec @ErrorCode=sp_executesql @sSQLString,
				N'@pnCaseKey	int',
				  @pnCaseKey=@pnCaseKey
End

-- Now recalculate any remaining Open Actions to ensure they have the
-- correct Criteria.
-- If the Police Immediately option is on then attach a unique Batch Number
-- for all entries so that they can be recalcualted at the one time. Also
-- set the On Hold Flag on so that the Policing Server does not pick up
-- these requests

If  @ErrorCode=0
and @pbPoliceImmediately=1
and @pnPolicingBatchNo is null
Begin	
	-- Get the Batchnumber to use for Police Immediately

	Set @sSQLString="
	Update LASTINTERNALCODE
	set INTERNALSEQUENCE=INTERNALSEQUENCE+1,
	    @nBatchNo      =INTERNALSEQUENCE+1
	where TABLENAME='POLICINGBATCH'"

	exec @ErrorCode=sp_executesql @sSQLString,
				N'@nBatchNo	int	OUTPUT',
				  @nBatchNo=@nBatchNo	OUTPUT

	Set @RowCount=@@Rowcount

	If @ErrorCode=0
	and @RowCount=0
	Begin
		Set @sSQLString="
		Insert into LASTINTERNALCODE(TABLENAME, INTERNALSEQUENCE)
		values ('POLICINGBATCH', 0)"

		exec @ErrorCode=sp_executesql @sSQLString
		
		set @nBatchNo=0
	End
End
Else If  @pbPoliceImmediately=0
     and @pnPolicingBatchNo is not null
Begin
	set @nBatchNo=@pnPolicingBatchNo
End

-- Insert a Policing Row for each OpenAction that needs recalculating. Need to 
-- go via an interim temporary table in order to generate an internal 
-- sequence number.

If @ErrorCode=0
Begin
	insert into @tbPolicing(ACTION, CYCLE)
	select ACTION, CYCLE
	from OPENACTION
	where CASEID=@pnCaseKey
	and POLICEEVENTS=1

	Select @ErrorCode=@@Error,
	       @RowCount=@@Rowcount

End

If  @ErrorCode=0
and @RowCount >0
Begin
	insert into POLICING(	DATEENTERED, POLICINGSEQNO, POLICINGNAME,  
				SYSGENERATEDFLAG, ONHOLDFLAG, ACTION ,CYCLE, TYPEOFREQUEST,
				SQLUSER, BATCHNO, CASEID, IDENTITYID,RECALCEVENTDATE)
	select	getdate(), POLICINGSEQNO, convert(varchar,getdate(),126)+convert(varchar,POLICINGSEQNO), 
		1, @pbPoliceImmediately, ACTION ,CYCLE, 4, SYSTEM_USER, @nBatchNo, @pnCaseKey, @pnUserIdentityId, 1
	from @tbPolicing
	
	Select @ErrorCode=@@Error,
	       @RowCount =@@Rowcount
End

-- Commit the transaction if it has successfully completed

If @@TranCount > @TranCountStart
and @pnPolicingBatchNo is null
Begin 
	If @ErrorCode = 0
		COMMIT TRANSACTION
	Else
		ROLLBACK TRANSACTION
End

-- If Policing rows have been inserted and the Police Immediately option is on
-- then call the Policing stored procedure using the BatchNo that has been assigned.

If  @ErrorCode=0
and @RowCount >0
and @pbPoliceImmediately=1
and @nBatchNo is not null
Begin
	exec @ErrorCode=dbo.ipu_Policing
				@pnBatchNo=@nBatchNo,
				@pnUserIdentityId=@pnUserIdentityId
End

Return @ErrorCode
go

grant execute on dbo.cs_UpdateCaseActions to public
go
