-----------------------------------------------------------------------------------------------------------------------------
-- Creation of dg_ArchiveActivityRequestBulk
-----------------------------------------------------------------------------------------------------------------------------
If exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[dg_ArchiveActivityRequestBulk]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
begin
	print '**** Drop Stored Procedure dbo.dg_ArchiveActivityRequestBulk.'
	drop procedure [dbo].[dg_ArchiveActivityRequestBulk]
	print '**** Creating Stored Procedure dbo.dg_ArchiveActivityRequestBulk...'
	print ''
end
go

SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

CREATE PROCEDURE dbo.dg_ArchiveActivityRequestBulk
(
	@pnActivityId			int
)
AS
-- PROCEDURE :	dg_ArchiveActivityRequestBulk
-- VERSION :	2
-- DESCRIPTION:	Moves processed ACTIVITYREQUEST rows to ACTIVITYHISTORY
-- CALLED BY :	DOCSVR32.EXE
-- MODIFICATIONS :
-- Date		Who	SQA	Version	Change
-- ------------	-------	-----	-------	----------------------------------------------- 
-- 08/08/2008	DL	16723	1	Procedure created
-- 04/02/2010	DL	18430	2	Grant stored procedure to public


Set NOCOUNT ON
Set CONCAT_NULL_YIELDS_NULL OFF
 

declare @nErrorCode		int,
	@nCaseCount		int,
	@dtCurrentLetterDate	datetime

Set @dtCurrentLetterDate 	= getdate()
set @nErrorCode = 0

If @nErrorCode = 0
Begin
	Select @nCaseCount = count(1)                      
	FROM ACTIVITYREQUEST                          
	WHERE GROUPACTIVITYID = @pnActivityId

	Set @nErrorCode = @@ERROR
End

-- There are no cases processed in bulk so end the process
If @nCaseCount = 0
	RETURN 0


-- Create the attachments for all cases 
If @nErrorCode = 0
Begin
	begin transaction 

	Insert into ACTIVITYHISTORY ( 
	CASEID, WHENREQUESTED, SQLUSER, QUESTIONNO, INSTRUCTOR, OWNER, EMPLOYEENO, PROGRAMID, [ACTION], 
	EVENTNO, CYCLE, LETTERNO, ALTERNATELETTER, COVERINGLETTERNO, HOLDFLAG, SPLITBILLFLAG, BILLPERCENTAGE, 
	DEBITNOTENO, ENTITYNO, DEBTORNAMETYPE, DEBITNOTEDETAIL, LETTERDATE, DELIVERYID, ACTIVITYTYPE, 
	ACTIVITYCODE, PROCESSED, TRANSACTIONFLAG, PRODUCECHARGES, WHENOCCURRED, STATUSCODE, RATENO, PAYFEECODE, 
	ENTEREDQUANTITY, ENTEREDAMOUNT, DISBCURRENCY, DISBEXCHANGERATE, SERVICECURRENCY, SERVEXCHANGERATE, 
	BILLCURRENCY, BILLEXCHANGERATE, DISBTAXCODE, SERVICETAXCODE, DISBNARRATIVE, SERVICENARRATIVE, 
	DISBAMOUNT, SERVICEAMOUNT, DISBTAXAMOUNT, SERVICETAXAMOUNT, TOTALDISCOUNT, DISBWIPCODE, SERVICEWIPCODE, 
	SYSTEMMESSAGE, DISBEMPLOYEENO, SERVEMPLOYEENO, DISBORIGINALAMOUNT, SERVORIGINALAMOUNT, DISBBILLAMOUNT, 
	SERVBILLAMOUNT, DISCBILLAMOUNT, TAKENUPAMOUNT, DISBDISCOUNT, SERVDISCOUNT, DISBBILLDISCOUNT, 
	SERVBILLDISCOUNT, DISBCOSTLOCAL, DISBCOSTORIGINAL, DISBDISCORIGINAL, SERVDISCORIGINAL, ESTIMATEFLAG, 
	EMAILOVERRIDE, DISBCOSTCALC1, DISBCOSTCALC2, SERVCOSTCALC1, SERVCOSTCALC2, IDENTITYID, DEBTOR, 
	SEPARATEDEBTORFLAG, PRODUCTCODE, XMLINSTRUCTIONID, CHECKLISTTYPE, SERVCOSTLOCAL, SERVCOSTORIGINAL, 
	[FILENAME], DIRECTPAYFLAG, BATCHNO, EDEOUTPUTTYPE, REQUESTID, XMLFILTER, GROUPACTIVITYID)
	select 
	CASEID, WHENREQUESTED, SQLUSER, QUESTIONNO, INSTRUCTOR, OWNER, EMPLOYEENO, PROGRAMID, [ACTION], 
	EVENTNO, CYCLE, LETTERNO, ALTERNATELETTER, COVERINGLETTERNO, 1 /*HOLDFLAG*/, SPLITBILLFLAG, BILLPERCENTAGE, 
	DEBITNOTENO, ENTITYNO, DEBTORNAMETYPE, DEBITNOTEDETAIL, @dtCurrentLetterDate /*LETTERDATE*/, DELIVERYID, ACTIVITYTYPE, 
	ACTIVITYCODE, 1 /*PROCESSED*/, TRANSACTIONFLAG, PRODUCECHARGES, @dtCurrentLetterDate /*WHENOCCURRED*/, STATUSCODE, RATENO, PAYFEECODE, 
	ENTEREDQUANTITY, ENTEREDAMOUNT, DISBCURRENCY, DISBEXCHANGERATE, SERVICECURRENCY, SERVEXCHANGERATE, 
	BILLCURRENCY, BILLEXCHANGERATE, DISBTAXCODE, SERVICETAXCODE, DISBNARRATIVE, SERVICENARRATIVE, 
	DISBAMOUNT, SERVICEAMOUNT, DISBTAXAMOUNT, SERVICETAXAMOUNT, TOTALDISCOUNT, DISBWIPCODE, SERVICEWIPCODE, 
	SYSTEMMESSAGE, DISBEMPLOYEENO, SERVEMPLOYEENO, DISBORIGINALAMOUNT, SERVORIGINALAMOUNT, DISBBILLAMOUNT, 
	SERVBILLAMOUNT, DISCBILLAMOUNT, TAKENUPAMOUNT, DISBDISCOUNT, SERVDISCOUNT, DISBBILLDISCOUNT, 
	SERVBILLDISCOUNT, DISBCOSTLOCAL, DISBCOSTORIGINAL, DISBDISCORIGINAL, SERVDISCORIGINAL, ESTIMATEFLAG, 
	EMAILOVERRIDE, DISBCOSTCALC1, DISBCOSTCALC2, SERVCOSTCALC1, SERVCOSTCALC2, IDENTITYID, DEBTOR, 
	SEPARATEDEBTORFLAG, PRODUCTCODE, XMLINSTRUCTIONID, CHECKLISTTYPE, SERVCOSTLOCAL, SERVCOSTORIGINAL, 
	[FILENAME], DIRECTPAYFLAG, BATCHNO, EDEOUTPUTTYPE, REQUESTID, XMLFILTER, GROUPACTIVITYID
	from ACTIVITYREQUEST 
	where GROUPACTIVITYID = @pnActivityId
	and ACTIVITYID <> @pnActivityId
                       
	Set @nErrorCode = @@ERROR

	-- delete processed rows from ACTIVITYREQUEST Except for the current case 
	If @nErrorCode = 0
	Begin
		Delete 	AR 
		from	ACTIVITYREQUEST AR
		where	AR.GROUPACTIVITYID = @pnActivityId
		and AR.ACTIVITYID <> @pnActivityId

		Set @nErrorCode = @@ERROR
	End


	if @nErrorCode = 0
		commit transaction
	else
		rollback transaction
End




RETURN @nErrorCode
go

grant execute on dbo.dg_ArchiveActivityRequestBulk to public
go

